# -*- coding: utf-8 -*-
"""Covid19_cases.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZXA7Yu1W-1dStyTz37je8G-ooMCR46ut

##**Covid-Cases Forecasting**
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

df=pd.read_csv("/content/Covid_19_Clean_Complete -TA Ajinkya.csv")

df.shape

df.info()

"""##EDA"""

df.rename(columns={"Province/State":"State", "Country/Region":"Country"},inplace=True)

df.head()

df_confirmed=df.groupby("Date")["Confirmed"].sum().reset_index()

df_confirmed

plt.figure(figsize=(20,6))
sns.lineplot(data=df_confirmed,x="Date",y="Confirmed")
plt.xlabel("Date")
plt.ylabel("Confirmed cases")
plt.title("Date vs Confirmed")
plt.show()

df_deaths=df.groupby("Date")["Deaths"].sum().reset_index()

plt.figure(figsize=(20,6))
sns.lineplot(data=df_deaths,x="Date",y="Deaths")
plt.xlabel("Date")
plt.ylabel("No.of deaths")
plt.title("Date vs Deaths")
plt.show()

df_recovery=df.groupby("Date")["Recovered"].sum().reset_index()

plt.figure(figsize=(20,6))
sns.lineplot(data=df_recovery,x="Date",y="Recovered")
plt.xlabel("Date")
plt.ylabel("Recovery cases")
plt.title("Date vs Recoveries")
plt.show()

df_active=df.groupby("Date")["Active"].sum().reset_index()

plt.figure(figsize=(20,6))
sns.lineplot(data=df_active,x="Date",y="Active")
plt.xlabel("Date")
plt.ylabel("Active cases")
plt.title("Date vs Active cases")
plt.show()

df_all_date=df.groupby(["Date"])[["Confirmed","Deaths","Recovered","Active"]].sum().reset_index()

df_all_date

df_all_date.plot(figsize=(20,8),x="Date")
plt.xlabel("Date")
plt.ylabel("No of cases")
plt.title("Date Vs Cases")
plt.show()

"""##Model -- Prophet-advanced tsa tool"""

#Prophet is a tsa tool developed by Facebook which is used for wide-range time series data effectively.
!pip install Prophet

"""Forecasting the confirmed cases for next 10 dates"""

from prophet import Prophet

model=Prophet()

df_confirmed.head()

#Prophet --- the should be given in ds and y aa x=ds,y=y

df_confirmed.columns=["ds","y"]

df_confirmed.head()

model.fit(df_confirmed)

"""Forcasting

"""

#forecast--periods - the no of next(dates) row values in df[confirmed]
mod=model.make_future_dataframe(periods=10)

forecast=model.predict(mod)

forecast

forecast[["yhat_lower","yhat","yhat_upper"]]
#Holiday effect-- in prophet it states the lb and ub to stabilize the predicted value --yhat is the target,yhat_upper&yhat_lower contains the target within the boundary

"""##Visualization of Forcasted values"""

model.plot(forecast,figsize=(20,6))
plt.show()





"""##Visualization of World map with active cases"""

# plotly --- advanced tool for ploting
import plotly.express as ex

world=df_all_date

world = df.groupby("Country")["Active"].sum().reset_index()
figure = ex.choropleth(world, locations='Country', locationmode='country names', color='Active', hover_name='Country', range_color=[1,100000], color_continuous_scale='reds', title='World map showing all the actives cases ')
figure.show()